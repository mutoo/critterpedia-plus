/**
 *
 * {{properCase name }}
 *
 */

{{#if memo}}
import React, { memo } from 'react';
{{else}}
import React from 'react';
{{/if}}
// import PropTypes from 'prop-types';
{{#if wantHeaders}}
import { Helmet } from 'react-helmet-async';
{{/if}}
{{#if wantMessages}}
import { FormattedMessage } from 'react-intl';
{{/if}}
{{#if wantActionsAndReducer}}
import { useSelector, useDispatch } from 'react-redux';
import { createStructuredSelector } from 'reselect';
{{/if}}

{{#if wantActionsAndReducer}}
  {{#if wantSaga}}
import { useInjectReducer, useInjectSaga } from 'redux-injectors';
  {{else}}
import { useInjectReducer } from 'redux-injectors';
  {{/if}}
{{else}}
  {{#if wantSaga}}
import { useInjectSaga } from 'redux-injectors';
  {{/if}}
{{/if}}
{{#if wantActionsAndReducer}}
import makeSelect{{properCase name}} from './selectors';
import { reducer } from './slice';
{{/if}}
{{#if wantSaga}}
import saga from './saga';
{{/if}}
{{#if wantMessages}}
import messages from './messages';
{{/if}}

{{#if wantActionsAndReducer}}
const stateSelector = createStructuredSelector({
  {{camelCase name}}: makeSelect{{properCase name}}(),
});
{{/if}}

function {{ properCase name }}() {
  {{#if wantActionsAndReducer}}
  useInjectReducer({ key: '{{ camelCase name }}', reducer });
  {{/if}}
  {{#if wantSaga}}
  useInjectSaga({ key: '{{ camelCase name }}', saga });
  {{/if}}
  {{#if wantActionsAndReducer}}

  /* eslint-disable no-unused-vars */
  const { {{camelCase name}} } = useSelector(stateSelector);
  const dispatch = useDispatch();
  /* eslint-enable no-unused-vars */
  {{/if}}

  return (
    <div>
    {{#if wantHeaders}}
      <Helmet>
        <title>{{properCase name}}</title>
        <meta name="description" content="Description of {{properCase name}}" />
      </Helmet>
    {{/if}}
    {{#if wantMessages}}
      <FormattedMessage {...messages.header} />
    {{/if}}
    </div>
  );
}

{{ properCase name }}.propTypes = {};

{{#if memo}}
export default memo({{ properCase name }});
{{else}}
export default {{ properCase name }};
{{/if}}
